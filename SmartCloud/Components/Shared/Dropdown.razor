@typeparam TItem
<div class="dropdown">
    <button id="Dropdown" class="btn btn-light dropdown-toggle mr-4 shadow-none" data-toggle="dropdown" type="button"
            @onclick="_ => _show = !_show"
            @onfocusout="_ => _show = _inMenu"
            aria-haspopup="true" aria-expanded="false">
        @_tip
    </button>
    <CascadingValue name="Dropdown" Value="@this">
        <div class="dropdown-menu @(_show ? "show" : "")"
             @onmouseenter="_ => _inMenu = true"
             @onmouseleave="_ => _inMenu = false">
            @ChildContent
        </div>
    </CascadingValue>
</div>

@code {
    [Parameter] public required RenderFragment InitialTip { get; set; }
    [Parameter] public required RenderFragment ChildContent { get; set; }
    [Parameter] public EventCallback<Tuple<TItem, string>> OnSelected { get; set; }

    private bool _show;
    private bool _inMenu;
    private RenderFragment _tip = null!;

    protected override void OnInitialized()
    {
        _tip = InitialTip;
    }

    public async Task HandleSelect(TItem item, RenderFragment<TItem> contentFragment, string newValue)
    {
        _tip = contentFragment.Invoke(item);
        _show = false;
        StateHasChanged();
        var args = new Tuple<TItem, string>(item, newValue);
        await OnSelected.InvokeAsync(args);
    }
}